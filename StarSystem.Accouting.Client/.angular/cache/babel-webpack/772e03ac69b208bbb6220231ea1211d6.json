{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"./errorHandler.service\";\nexport let StarSystemService = /*#__PURE__*/(() => {\n  class StarSystemService {\n    constructor(http, errorHandlerService) {\n      this.http = http;\n      this.errorHandlerService = errorHandlerService;\n      this.errorMessage = \"\";\n      this.apiUrl = \"https://localhost:7090/api\";\n    }\n\n    create(request) {\n      return this.http.post(this.apiUrl + \"/StarSystem/Create\", request).subscribe(data => {\n        window.location.href = \"/starSystem/toList\";\n      }, err => {\n        console.log(\"ErrorCreate:\", err);\n        this.errorHandlerService.handleError(err);\n        this.errorMessage = this.errorHandlerService.errorMessage;\n      });\n    }\n\n    getAll() {\n      return this.http.get(this.apiUrl + \"/StarSystem/GetAll\");\n    }\n\n    update(starSystemUpdateRequest, starSystemId, spaceObjectId) {\n      return this.http.post(this.apiUrl + \"/StarSystem/Update\", starSystemUpdateRequest).subscribe(data => {\n        console.log(\"Обновил звездную систему с id: \", data);\n        this.setCenterOfGravity(starSystemId, spaceObjectId);\n      }, err => {\n        console.log(\"ErrorUpdate:\", err);\n        this.errorHandlerService.handleError(err);\n        this.errorMessage = this.errorHandlerService.errorMessage;\n      });\n    }\n\n    getById(id) {\n      return this.http.get(this.apiUrl + \"/StarSystem/GetById?id=\" + id);\n    }\n\n    setCenterOfGravity(starSystemId, spaceObjectId) {\n      var mydata = new Data(starSystemId, spaceObjectId);\n      return this.http.post(this.apiUrl + \"/StarSystem/SetCenterOfGravity\", mydata).subscribe(data => {\n        console.log(\"Изменил центр: \", data);\n        window.location.href = '/starSystem/toList';\n      }, err => {\n        console.log(\"ErrorSetCenterOfGravity:\", err);\n        this.errorHandlerService.handleError(err);\n        this.errorMessage = this.errorHandlerService.errorMessage;\n      });\n    }\n\n    delete(id) {\n      return this.http.delete(this.apiUrl + \"/StarSystem/Delete/\" + id).subscribe(data => {\n        console.log(\"Удалил обьект с id: \", data);\n        window.location.href = '/starSystem/toList';\n      }, err => {\n        console.log(\"ErrorDelete:\", err);\n        this.errorHandlerService.handleError(err);\n        this.errorMessage = this.errorHandlerService.errorMessage;\n      });\n    }\n\n  }\n\n  StarSystemService.ɵfac = function StarSystemService_Factory(t) {\n    return new (t || StarSystemService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.ErrorHandlerService));\n  };\n\n  StarSystemService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: StarSystemService,\n    factory: StarSystemService.ɵfac\n  });\n  return StarSystemService;\n})();\nexport class Data {\n  constructor(StarSystemId, SpaceObjectId) {\n    this.SpaceObjectId = SpaceObjectId;\n    this.StarSystemId = StarSystemId;\n  }\n\n}","map":null,"metadata":{},"sourceType":"module"}