{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\n\nvar Guid =\n/** @class */\nfunction () {\n  function Guid(guid) {\n    if (!guid) {\n      throw new TypeError(\"Invalid argument; `value` has no value.\");\n    }\n\n    this.value = Guid.EMPTY;\n\n    if (guid && Guid.isGuid(guid)) {\n      this.value = guid;\n    }\n  }\n\n  Guid.isGuid = function (guid) {\n    var value = guid.toString();\n    return guid && (guid instanceof Guid || Guid.validator.test(value));\n  };\n\n  Guid.create = function () {\n    return new Guid([Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\"));\n  };\n\n  Guid.createEmpty = function () {\n    return new Guid(\"emptyguid\");\n  };\n\n  Guid.parse = function (guid) {\n    return new Guid(guid);\n  };\n\n  Guid.raw = function () {\n    return [Guid.gen(2), Guid.gen(1), Guid.gen(1), Guid.gen(1), Guid.gen(3)].join(\"-\");\n  };\n\n  Guid.gen = function (count) {\n    var out = \"\";\n\n    for (var i = 0; i < count; i++) {\n      // tslint:disable-next-line:no-bitwise\n      out += ((1 + Math.random()) * 0x10000 | 0).toString(16).substring(1);\n    }\n\n    return out;\n  };\n\n  Guid.prototype.equals = function (other) {\n    // Comparing string `value` against provided `guid` will auto-call\n    // toString on `guid` for comparison\n    return Guid.isGuid(other) && this.value === other.toString();\n  };\n\n  Guid.prototype.isEmpty = function () {\n    return this.value === Guid.EMPTY;\n  };\n\n  Guid.prototype.toString = function () {\n    return this.value;\n  };\n\n  Guid.prototype.toJSON = function () {\n    return {\n      value: this.value\n    };\n  };\n\n  Guid.validator = new RegExp(\"^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$\", \"i\");\n  Guid.EMPTY = \"00000000-0000-0000-0000-000000000000\";\n  return Guid;\n}();\n\nexports.Guid = Guid;","map":null,"metadata":{},"sourceType":"script"}